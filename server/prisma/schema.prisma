generator client {
  provider = "prisma-client-js"
}

// dev
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// prod
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// modelos
model Account {
  id           Int     @id @default(autoincrement())
  username     String  @unique
  email        String  @unique
  phone        String
  passwordHash String
  suscripcion  String?

  distrito    Distrito?     @relation(fields: [distritoId], references: [id])
  provincia   Provincia?    @relation(fields: [provinciaId], references: [id])
  departmento Departamento? @relation(fields: [departamentoId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  profesores Profesor[] @relation("AccountProfessores")
  alumnos    Alumno[]   @relation("AccountAlumnos")

  distritoId     Int? @map("distrito_id")
  provinciaId    Int? @map("provincia_id")
  departamentoId Int? @map("departamento_id")

  @@map("accounts")
}

model Preferencia {
  id     Int     @id @default(autoincrement())
  nombre String?

  alumnosRelacionados AlumnoPreferencia[] @relation("PreferenciaAlumnoPreferencias")

  @@map("preferencias")
}

// location
model Departamento {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  provincias Provincia[]
  distritos  Distrito[]
  Account    Account[]

  @@map("departamentos")
}

model Provincia {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  departamentoId Int          @map("departamento_id")
  departamento   Departamento @relation(fields: [departamentoId], references: [id])
  distritos      Distrito[]
  Account        Account[]

  @@map("provincias")
}

model Distrito {
  id   Int    @id @default(autoincrement())
  name String

  provinciaId Int       @map("provincia_id")
  provincia   Provincia @relation(fields: [provinciaId], references: [id])

  departamentoId Int          @map("departamento_id")
  departamento   Departamento @relation(fields: [departamentoId], references: [id])
  Account        Account[]

  @@map("distritos")
}

// models
model Especialidad {
  id                     Int                    @id @default(autoincrement())
  especialidad           String?
  profesorEspecialidades ProfesorEspecialidad[] @relation("EspecialidadProfesorEspecialidades")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("especialidad")
}

model Profesor {
  id               Int                    @id @default(autoincrement())
  nombre           String?
  edad             Int?
  especialidades   ProfesorEspecialidad[] @relation("ProfesorEspecialidades")
  chats            Chat[]
  clases           Clase[]                @relation("ProfesorClases")
  resenasAsociadas Review[]               @relation("ProfesorReviews")
  alumnosPorClase  AlumnoClase[]
  cuenta           Account?               @relation("AccountProfessores", fields: [accountId], references: [id])

  accountId Int?     @map("account_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("profesores")
}

model Review {
  id             Int       @id @default(autoincrement())
  profesor       Profesor? @relation("ProfesorReviews", fields: [idProfesor], references: [id])
  alumno         Alumno?   @relation("AlumnoReviews", fields: [idAlumno], references: [id])
  ensenanza      Int?
  puntualidad    Int?
  disponibilidad Int?
  comunicacion   Int?
  evaluacion     Int?
  empatia        Int?

  idProfesor Int?     @map("id_profesor")
  idAlumno   Int?     @map("id_alumno")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("reviews")
}

model Alumno {
  id     Int     @id @default(autoincrement())
  nombre String?
  edad   Int?

  account      Account?            @relation("AccountAlumnos", fields: [idAccount], references: [id])
  clases       AlumnoClase[]       @relation("AlumnoClases")
  preferencias AlumnoPreferencia[] @relation("AlumnoPreferencias")
  chats        Chat[]              @relation("AlumnoChats")
  reviews      Review[]            @relation("AlumnoReviews")

  idAccount Int?     @map("account_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("alumnos")
}

model Seccion {
  id         Int               @id @default(autoincrement())
  nombre     String?
  materiales MaterialSeccion[] @relation("SeccionMaterialSecciones")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("secciones")
}

model MaterialEducativo {
  id        Int     @id @default(autoincrement())
  nombre    String?
  documento Bytes?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  materialSecciones MaterialSeccion[] @relation("MaterialEducativoSecciones")

  @@map("material_educativo")
}

model MaterialSeccion {
  id         Int  @id @default(autoincrement())
  idMaterial Int? @map("id_material")
  idSeccion  Int? @map("id_seccion")

  material MaterialEducativo? @relation("MaterialEducativoSecciones", fields: [idMaterial], references: [id])
  seccion  Seccion?           @relation("SeccionMaterialSecciones", fields: [idSeccion], references: [id])

  @@map("material_seccion")
}

model Clase {
  id        Int      @id @default(autoincrement())
  curso     String?
  ubicacion Int?
  esVirtual Boolean? @map("es_virtual")
  esGrupal  Boolean? @map("es_grupal")

  profesor Profesor?     @relation("ProfesorClases", fields: [idProfesor], references: [id])
  alumnos  AlumnoClase[] @relation("ClaseAlumnoClases")

  fechaClase DateTime @map("fecha_clase")

  idProfesor Int? @map("id_profesor")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("clase")
}

model Chat {
  id Int @id @default(autoincrement())

  alumno   Alumno?       @relation("AlumnoChats", fields: [idAlumno], references: [id])
  profesor Profesor?     @relation(fields: [idProfesor], references: [id])
  mensajes ChatMensaje[] @relation("ChatMensajes")

  idAlumno   Int? @map("id_alumno")
  idProfesor Int? @map("id_profesor")

  createdAt DateTime @default(now()) @map("fecha_creacion")

  @@map("chats")
}

model Mensaje {
  id        Int           @id @default(autoincrement())
  contenido String?
  chats     ChatMensaje[] @relation("MensajeChatMensajes")

  createdAt DateTime @default(now()) @map("fecha_envio")

  @@map("mensaje")
}

// many-to-many
model ChatMensaje {
  idChat    Int @map("id_chat")
  idMensaje Int @map("id_mensaje")

  chat    Chat?    @relation("ChatMensajes", fields: [idChat], references: [id])
  mensaje Mensaje? @relation("MensajeChatMensajes", fields: [idMensaje], references: [id])

  @@id([idChat, idMensaje])
  @@map("chat_mensaje")
}

model AlumnoClase {
  id        Int      @id @default(autoincrement())
  idAlumno  Int?     @map("id_alumno")
  idClase   Int?     @map("id_clase")
  nota      Int?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  alumno     Alumno?   @relation("AlumnoClases", fields: [idAlumno], references: [id])
  clase      Clase?    @relation("ClaseAlumnoClases", fields: [idClase], references: [id])
  profesorId Int?
  Profesor   Profesor? @relation(fields: [profesorId], references: [id])

  @@map("alumno_clase")
}

model AlumnoPreferencia {
  idAlumno      Int @map("id_alumno")
  idPreferencia Int @map("id_preferencia")

  alumno      Alumno?      @relation("AlumnoPreferencias", fields: [idAlumno], references: [id])
  preferencia Preferencia? @relation("PreferenciaAlumnoPreferencias", fields: [idPreferencia], references: [id])

  @@id([idAlumno, idPreferencia])
  @@map("alumno_preferencia")
}

model ProfesorEspecialidad {
  idProfesor     Int      @map("id_profesor")
  idEspecialidad Int      @map("id_especialidad")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")

  profesor     Profesor?     @relation("ProfesorEspecialidades", fields: [idProfesor], references: [id])
  especialidad Especialidad? @relation("EspecialidadProfesorEspecialidades", fields: [idEspecialidad], references: [id])

  @@id([idProfesor, idEspecialidad])
  @@map("profesor_especialidad")
}
