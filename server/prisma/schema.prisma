generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

// prod
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// modelos
model Account {
  id                 String              @id @db.Uuid
  email              String              @unique
  phone              String?             @unique
  accountSuscripcion AccountSuscripcion?

  distrito    Distrito?     @relation(fields: [distritoId], references: [id])
  provincia   Provincia?    @relation(fields: [provinciaId], references: [id])
  departmento Departamento? @relation(fields: [departamentoId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  alumno   Alumno?   @relation("AccountAlumno")
  profesor Profesor? @relation("AccountProfessores")
  pais     Pais?     @relation(fields: [paisId], references: [id])

  paisId         String? @map("pais_id")
  distritoId     String? @map("distrito_id")
  provinciaId    String? @map("provincia_id")
  departamentoId String? @map("departamento_id")

  @@map("accounts")
}

model AccountSuscripcion {
  tipo         String   @unique
  vigenteHasta DateTime

  account     Account     @relation(fields: [accountId], references: [id])
  suscripcion Suscripcion @relation(fields: [suscripcionId], references: [id])

  accountId     String @unique @db.Uuid
  suscripcionId Int

  @@id([accountId, suscripcionId])
  @@map("accounts_suscripciones")
}

model Suscripcion {
  id   Int    @unique
  tipo String @unique

  accountsWithSuscripcion AccountSuscripcion[]

  @@map("suscripciones")
}

model Alumno {
  id     Int    @id @default(autoincrement())
  nombre String
  edad   Int

  account      Account?            @relation("AccountAlumno", fields: [accountId], references: [id])
  clases       AlumnoClase[]       @relation("AlumnoClases")
  preferencias AlumnoPreferencia[] @relation("AlumnoPreferencias")
  chats        Chat[]              @relation("AlumnoChats")
  reviews      Review[]            @relation("AlumnoReviews")

  accountId String?  @unique @map("account_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("alumnos")
}

model Profesor {
  id             Int                    @id @default(autoincrement())
  nombre         String
  edad           Int
  especialidades ProfesorEspecialidad[] @relation("ProfesorEspecialidades")

  chats            Chat[]
  clases           Clase[]  @relation("ProfesorClases")
  resenasAsociadas Review[] @relation("ProfesorReviews")
  cuenta           Account? @relation("AccountProfessores", fields: [accountId], references: [id])

  profesorSubEspecialidades ProfesorSubEspecialidad[]
  accountId                 String?                   @unique @map("account_id") @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("profesores")
}

model Review {
  id          Int       @id @default(autoincrement())
  profesor    Profesor? @relation("ProfesorReviews", fields: [profesorId], references: [id])
  alumno      Alumno?   @relation("AlumnoReviews", fields: [alumnoId], references: [id])
  descripcion String

  ensenanza      Int?
  puntualidad    Int?
  disponibilidad Int?
  comunicacion   Int?
  evaluacion     Int?
  empatia        Int?

  profesorId Int? @map("profesor_id")
  alumnoId   Int? @map("alumno_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("reviews")
}

model Especialidad {
  id           Int    @id @default(autoincrement())
  especialidad String

  profesorEspecialidades ProfesorEspecialidad[] @relation("EspecialidadProfesorEspecialidades")
  alumnoPreferenciaes    AlumnoPreferencia[]    @relation("PreferenciaAlumnoPreferencias")
  subEspecialidades      SubEspecialidad[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("especialidades")
}

model SubEspecialidad {
  id              Int          @id @default(autoincrement())
  especialidad    Especialidad @relation(fields: [especialidadId], references: [id])
  subEspecialidad String

  clases                    Clase[]
  profesorSubEspecialidades ProfesorSubEspecialidad[] @relation("SubEspecialidadProfesorSubEspecialidades")

  especialidadId Int @map("especialidad_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("subespecialidades")
}

model MaterialEducativo {
  id Int @id @default(autoincrement())

  nombre   String?
  assetUrl String? @unique @map("asset_url")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  materialClases MaterialClase[] @relation("MaterialEducativoClases")

  @@map("material_educativos")
}

model MaterialClase {
  id Int @id @default(autoincrement())

  clase    Clase?             @relation(fields: [claseId], references: [id])
  material MaterialEducativo? @relation("MaterialEducativoClases", fields: [materialId], references: [id])

  materialId Int? @map("material_id")
  claseId    Int? @map("clase_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("material_clases")
}

model Clase {
  id Int @id @default(autoincrement())

  tema          SubEspecialidad? @relation(fields: [subEspecialidadId], references: [id])
  sector        Sector           @relation(fields: [sectorId], references: [id])
  materialClase MaterialClase[]

  esVirtual Boolean? @map("es_virtual")
  esGrupal  Boolean? @map("es_grupal")

  fechaClase DateTime @map("fecha_clase")

  profesorId        Int? @map("profesor_id")
  subEspecialidadId Int? @map("subespecialidad_id")
  sectorId          Int  @map("sector_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  profesor Profesor?     @relation("ProfesorClases", fields: [profesorId], references: [id])
  alumnos  AlumnoClase[] @relation("ClaseAlumnoClases")

  @@map("clases")
}

model Sector {
  id Int @id @default(autoincrement())

  name   String
  clases Clase[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("sectores")
}

model Chat {
  id Int @id @default(autoincrement())

  alumno   Alumno?       @relation("AlumnoChats", fields: [alumnoId], references: [id])
  profesor Profesor?     @relation(fields: [profesorId], references: [id])
  mensajes ChatMensaje[] @relation("ChatMensajes")

  alumnoId   Int? @map("id_alumno")
  profesorId Int? @map("id_profesor")

  createdAt DateTime @default(now()) @map("fecha_creacion")

  @@map("chats")
}

model Mensaje {
  id        Int           @id @default(autoincrement())
  contenido String?
  chats     ChatMensaje[] @relation("MensajeChatMensajes")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("mensajes")
}

// many-to-many
model ChatMensaje {
  chatId    Int @map("id_chat")
  mensajeId Int @map("id_mensaje")

  chat    Chat?    @relation("ChatMensajes", fields: [chatId], references: [id])
  mensaje Mensaje? @relation("MensajeChatMensajes", fields: [mensajeId], references: [id])

  @@id([chatId, mensajeId])
  @@map("chat_mensajes")
}

model AlumnoClase {
  alumno Alumno? @relation("AlumnoClases", fields: [alumnoId], references: [id])
  clase  Clase?  @relation("ClaseAlumnoClases", fields: [claseId], references: [id])

  nota Int?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  alumnoId Int @map("alumno_id")
  claseId  Int @map("clase_id")

  @@id([alumnoId, claseId])
  @@map("alumno_clases")
}

model AlumnoPreferencia {
  alumnoId      Int @map("id_alumno")
  preferenciaId Int @map("id_preferencia")

  alumno      Alumno?       @relation("AlumnoPreferencias", fields: [alumnoId], references: [id])
  preferencia Especialidad? @relation("PreferenciaAlumnoPreferencias", fields: [preferenciaId], references: [id])

  @@id([alumnoId, preferenciaId])
  @@map("alumno_preferencias")
}

model ProfesorEspecialidad {
  profesorId        Int  @map("profesor_id")
  especialidadId    Int  @map("especialidad_id")
  subEspecialidadId Int? @map("subespecialidad_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  profesor     Profesor?     @relation("ProfesorEspecialidades", fields: [profesorId], references: [id])
  especialidad Especialidad? @relation("EspecialidadProfesorEspecialidades", fields: [especialidadId], references: [id])

  @@id([profesorId, especialidadId])
  @@map("profesor_especialidades")
}

model ProfesorSubEspecialidad {
  subEspecialidadId Int @map("subespecialidad_id")
  profesorId        Int @map("profesor_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  profesor        Profesor         @relation(fields: [profesorId], references: [id])
  subEspecialidad SubEspecialidad? @relation("SubEspecialidadProfesorSubEspecialidades", fields: [subEspecialidadId], references: [id])

  @@id([profesorId, subEspecialidadId])
  @@map("profesor_subespecialidades")
}

// location
model Departamento {
  id   String @id
  name String @unique

  provincias Provincia[]
  distritos  Distrito[]

  accountsInDepartamento Account[]

  @@map("departamentos")
}

model Provincia {
  id   String @id
  name String @unique

  departamento Departamento @relation(fields: [departamentoId], references: [id])
  distritos    Distrito[]

  accountsInProvincia Account[]

  departamentoId String @map("departamento_id")

  @@map("provincias")
}

model Distrito {
  id   String @id
  name String

  provincia    Provincia    @relation(fields: [provinciaId], references: [id])
  departamento Departamento @relation(fields: [departamentoId], references: [id])

  accountsInDistrito Account[]

  provinciaId    String @map("provincia_id")
  departamentoId String @map("departamento_id")

  @@map("distritos")
}

model Pais {
  id      String    @id
  name    String
  code    String
  Account Account[]

  @@map("paises")
}
