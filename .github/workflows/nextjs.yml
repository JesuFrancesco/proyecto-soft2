# # Sample workflow for building and deploying a Next.js site to GitHub Pages
# #
# # To get started with Next.js see: https://nextjs.org/docs/getting-started
# #
# name: Eduyacha CI/CD (frontend)
# run-name: Proceso de despliegue de NextJS a Github Pages

# on:
#   # Runs on pushes targeting the default branch
#   push:
#     branches: ["prod"]

#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
# permissions:
#   contents: read
#   pages: write
#   id-token: write

# # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
# concurrency:
#   group: "pages"
#   cancel-in-progress: false

# jobs:
#   # Build job
#   build:
#     name: Compilar proyecto de NextJS (static)
#     defaults:
#       run:
#         working-directory: client
#     strategy:
#       matrix:
#         node-version: [20]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Obtener contenido de repositorio
#         uses: actions/checkout@v4

#       - name: Determinar package manager para Node.js ${{ matrix.node-version }}
#         id: detect-package-manager
#         run: |
#           if [ -f "./yarn.lock" ]; then
#             echo "manager=yarn" >> $GITHUB_OUTPUT
#             echo "command=install" >> $GITHUB_OUTPUT
#             echo "runner=yarn" >> $GITHUB_OUTPUT
#             exit 0
#           elif [ -f "./package.json" ]; then
#             echo "manager=npm" >> $GITHUB_OUTPUT
#             echo "command=i" >> $GITHUB_OUTPUT
#             echo "runner=npx --no-install" >> $GITHUB_OUTPUT
#             exit 0
#           else
#             echo "Unable to determine package manager"
#             exit 1
#           fi

#       - name: Preparar ambiente Node
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ matrix.node-version }}
#           cache: "npm"
#           cache-dependency-path: "**/package-lock.json"

#       - name: Preparar ambiente para Pages
#         uses: actions/configure-pages@v5
#         with:
#           # Automatically inject basePath in your Next.js configuration file and disable
#           # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
#           #
#           # You may remove this line if you want to manage the configuration yourself.
#           static_site_generator: next

#       - name: Recuperar cache
#         uses: actions/cache@v4
#         with:
#           path: |
#             .next/cache
#           # Generate a new cache whenever packages or source files change.
#           key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
#           # If source files changed but packages didn't, rebuild from a prior cache.
#           restore-keys: |
#             ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

#       - name: Instalar dependencies
#         run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

#       - name: Compilar proyecto Next.js
#         run: ${{ steps.detect-package-manager.outputs.runner }} next build

#       - name: Upload artifact
#         uses: actions/upload-pages-artifact@v3
#         with:
#           path: ./client/out

#   # Deployment job
#   deploy:
#     environment:
#       name: github-pages
#       url: ${{ steps.deployment.outputs.page_url }}
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - name: Despliegue a GitHub Pages
#         id: deployment
#         uses: actions/deploy-pages@v4

name: Eduyacha CI/CD (frontend)
run-name: Proceso de despliegue de NextJS a Vercel
env:
  # VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches:
      - prod

jobs:
  Deploy-development:
    defaults:
      run:
        working-directory: client
    runs-on: ubuntu-latest
    steps:
      - name: Traer codigo next
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v3

      - name: Install npm
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org/"

      - name: Install dependencies
        run: npm install

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=development --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
